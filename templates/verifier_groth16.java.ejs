package com.icon.snarkjs.verifier;

import score.Context;
import score.annotation.External;

import java.math.BigInteger;


public class SnarkJSVerifier {
    static final String protocol = "<%=protocol%>";
    static final String curve = "<%=curve%>";
    static final int nPublic = <%=nPublic%>;

    static final BigInteger BASE_FIELD = new BigInteger(
            "4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787");
    static final BigInteger SCALAR_FIELD = new BigInteger(
            "52435875175126190479447740508185965837690552500527637822603658699938581184513");
    static final int BASE_FIELD_SIZE = 48; // bytes

    static byte[] concat(byte[]... args) {
        int length = 0;
        for (int i = 0; i < args.length; i++) {
            length += args[i].length;
        }
        byte[] out = new byte[length];
        int offset = 0;
        for (int i = 0; i < args.length; i++) {
            System.arraycopy(args[i], 0, out, offset, args[i].length);
            offset += args[i].length;
        }
        return out;
    }

    static class P1 {
        BigInteger x;
        BigInteger y;

        P1() {
            this.x = new BigInteger(
                    "9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704");
            this.y = BigInteger.ZERO;
        }

        P1(BigInteger x, BigInteger y) {
            this.x = x;
            this.y = y;
        }

        public static P1 from_bytes(byte[] data) {
            if (data.length != 2 * BASE_FIELD_SIZE) {
                throw new IllegalArgumentException("P1.from_bytes: invalid data layout!");
            }
            byte[] buf = new byte[BASE_FIELD_SIZE];
            System.arraycopy(data, 0, buf, 0, BASE_FIELD_SIZE);
            BigInteger x = new BigInteger(buf);
            System.arraycopy(data, BASE_FIELD_SIZE, buf, 0, BASE_FIELD_SIZE);
            BigInteger y = new BigInteger(buf);
            return new P1(x, y);
        }

        public byte[] to_bytes() {
            byte[] buf = new byte[2 * BASE_FIELD_SIZE];
            byte[] xb = this.x.toByteArray();
            byte[] yb = this.y.toByteArray();
            System.arraycopy(xb, 0, buf, BASE_FIELD_SIZE - xb.length, xb.length);
            System.arraycopy(yb, 0, buf, 2 * BASE_FIELD_SIZE - yb.length, yb.length);
            return buf;
        }

        public boolean equals(P1 p) {
            return this.x.equals(p.x) && this.y.equals(p.y);
        }

        public P1 neg() {
            P1 zero = new P1();
            return this.equals(zero) ? zero : new P1(this.x, BASE_FIELD.subtract(this.y.mod(BASE_FIELD)));
        }

        public P1 add(P1 other) {
            byte[] res = Context.ecAdd("bls12-381-g1", concat(this.to_bytes(), other.to_bytes()), false);
            return P1.from_bytes(res);
        }

        public P1 scalarMul(BigInteger scalar) {
            byte[] res = Context.ecScalarMul("bls12-381-g1", scalar.toByteArray(), this.to_bytes(), false);
            return P1.from_bytes(res);
        }

        public P1 generator() {
            return new P1(
                    new BigInteger(
                            "3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507"),
                    new BigInteger(
                            "1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569"));
        }
    }

    static class P2 {
        BigInteger x_u;
        BigInteger x;
        BigInteger y_u;
        BigInteger y;

        P2() {
            this.x_u = new BigInteger(
                    "9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704");
            this.x = BigInteger.ZERO;
            this.y_u = BigInteger.ZERO;
            this.y = BigInteger.ZERO;

        }

        P2(BigInteger x_u, BigInteger x, BigInteger y_u, BigInteger y) {
            this.x_u = x_u;
            this.x = x;
            this.y_u = y_u;
            this.y = y;
        }

        public static P2 from_bytes(byte[] data) {
            if (data.length != 4 * BASE_FIELD_SIZE) {
                throw new IllegalArgumentException("P2.from_bytes: invalid data layout!");
            }
            byte[] buf = new byte[BASE_FIELD_SIZE];
            System.arraycopy(data, 0, buf, 0, BASE_FIELD_SIZE);
            BigInteger x_u = new BigInteger(buf);
            System.arraycopy(data, BASE_FIELD_SIZE, buf, 0, BASE_FIELD_SIZE);
            BigInteger x = new BigInteger(buf);
            System.arraycopy(data, 2 * BASE_FIELD_SIZE, buf, 0, BASE_FIELD_SIZE);
            BigInteger y_u = new BigInteger(buf);
            System.arraycopy(data, 3 * BASE_FIELD_SIZE, buf, 0, BASE_FIELD_SIZE);
            BigInteger y = new BigInteger(buf);
            return new P2(x_u, x, y_u, y);
        }

        public byte[] to_bytes() {
            byte[] buf = new byte[4 * BASE_FIELD_SIZE];
            byte[] x_ub = this.x_u.toByteArray();
            byte[] x_b = this.x.toByteArray();
            byte[] y_ub = this.y_u.toByteArray();
            byte[] y_b = this.y.toByteArray();
            System.arraycopy(x_ub, 0, buf, BASE_FIELD_SIZE - x_ub.length, x_ub.length);
            System.arraycopy(x_b, 0, buf, 2 * BASE_FIELD_SIZE - x_b.length, x_b.length);
            System.arraycopy(y_ub, 0, buf, 3 * BASE_FIELD_SIZE - y_ub.length, y_ub.length);
            System.arraycopy(y_b, 0, buf, 4 * BASE_FIELD_SIZE - y_b.length, y_b.length);
            return buf;
        }

        public boolean equals(P2 p) {
            return this.x_u.equals(p.x_u) && this.x.equals(p.x) && this.y_u.equals(p.y_u) && this.y.equals(p.y);
        }

        public P2 neg() {
            P2 zero = new P2();
            return this.equals(zero) ? zero
                    : new P2(this.x_u, this.x, BASE_FIELD.subtract(this.y_u.mod(BASE_FIELD)),
                            BASE_FIELD.subtract(this.y.mod(BASE_FIELD)));
        }

        public P2 add(P2 other) {
            byte[] res = Context.ecAdd("bls12-381-g2", concat(this.to_bytes(), other.to_bytes()), false);
            return P2.from_bytes(res);
        }

        public P2 scalarMul(BigInteger scalar) {
            byte[] res = Context.ecScalarMul("bls12-381-g2", scalar.toByteArray(), this.to_bytes(), false);
            return P2.from_bytes(res);
        }

        public P2 generator() {
            return new P2(
                    new BigInteger(
                            "3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"),
                    new BigInteger(
                            "352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160"),
                    new BigInteger(
                            "927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"),
                    new BigInteger(
                            "1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905"));
        }
    }

    class Proof {
        P1 A;
        P2 B;
        P1 C;
    }

    class VerifyingKey {
        P1 alfa1;
        P2 beta2;
        P2 gamma2;
        P2 delta2;
        P1[] IC;
    }

    public VerifyingKey verifyingKey() {
        VerifyingKey vk = new VerifyingKey();
        vk.alfa1 = new P1(
                new BigInteger("<%=vk_alpha_1[0]%>"),
                new BigInteger("<%=vk_alpha_1[1]%>"));

        vk.beta2 = new P2(
                new BigInteger("<%=vk_beta_2[0][1]%>"),
                new BigInteger("<%=vk_beta_2[0][0]%>"),
                new BigInteger("<%=vk_beta_2[1][1]%>"),
                new BigInteger("<%=vk_beta_2[1][0]%>"));

        vk.gamma2 = new P2(
                new BigInteger("<%=vk_gamma_2[0][1]%>"),
                new BigInteger("<%=vk_gamma_2[0][0]%>"),
                new BigInteger("<%=vk_gamma_2[1][1]%>"),
                new BigInteger("<%=vk_gamma_2[1][0]%>"));

        vk.delta2 = new P2(
                new BigInteger("<%=vk_delta_2[0][1]%>"),
                new BigInteger("<%=vk_delta_2[0][0]%>"),
                new BigInteger("<%=vk_delta_2[1][1]%>"),
                new BigInteger("<%=vk_delta_2[1][0]%>"));

        vk.IC = new P1[] {
            <% for (let i = 0; i < IC.length; i++) { %>
            new P1( 
                new BigInteger("<%=IC[i][0]%>"),
                new BigInteger("<%=IC[i][1]%>")),
            <% } %>
        };

        return vk;
    }

    public boolean verify(BigInteger[] input, Proof proof) {
        VerifyingKey vk = verifyingKey();
        Context.require(input.length + 1 == vk.IC.length, "verifier-bad-input");
        // Compute the linear combination vk_x
        P1 vk_x = new P1();
        for (int i = 0; i < input.length; i++) {
            Context.require(input[i].compareTo(SCALAR_FIELD) < 0, "verifier-gte-snark-scalar-field");
            vk_x = vk_x.add(vk.IC[i + 1].scalarMul(input[i]));
        }
        vk_x = vk_x.add(vk.IC[0]);
        byte[] data = concat(
                proof.A.neg().to_bytes(),
                proof.B.to_bytes(),
                vk.alfa1.to_bytes(),
                vk.beta2.to_bytes(),
                vk_x.to_bytes(),
                vk.gamma2.to_bytes(),
                proof.C.to_bytes(),
                vk.delta2.to_bytes());
        return Context.ecPairingCheck("bls12-381", data, false);
    }

    @External(readonly = true)
    public boolean verifyProof(BigInteger[] a, BigInteger[][] b, BigInteger[] c, BigInteger[] input) {
        Proof proof = new Proof();
        proof.A = new P1(a[0], a[1]);
        proof.B = new P2(b[0][0], b[0][1], b[1][0], b[1][1]);
        proof.C = new P1(c[0], c[1]);
        return verify(input, proof);
    }

}