// This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

include "List.aes"
include "BLS12_381.aes"

contract Verifier =
  record proof = {a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g1}
  record proofInput = {a : int * int, b : (int * int) * (int * int), c : int * int}
  record verifying_key = {alpha : BLS12_381.g1, beta : BLS12_381.g2, gamma : BLS12_381.g2,
                          delta : BLS12_381.g2, gamma_abc : list(BLS12_381.g1)}

  entrypoint verify(input : list(int), proof_in : proofInput) : bool =
    verify_(input, mk_proof(proof_in))

  private function verify_(input : list(int), proof : proof) =
    let snark_scalar_field = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    let vk = verifying_key()
    require(List.length(input) + 1 == List.length(vk.gamma_abc), "invalid input")
    [ require(i =< snark_scalar_field, "invalid input") | i <- input ]
    let (g0 :: gs) = vk.gamma_abc
    let vk_x = List.foldl(addAndScalarMul, g0, List.zip(input, gs))
    BLS12_381.pairing_check([proof.a, BLS12_381.g1_neg(vk_x), BLS12_381.g1_neg(proof.c), BLS12_381.g1_neg(vk.alpha)],
                            [proof.b, vk.gamma, vk.delta, vk.beta])

  private function addAndScalarMul(x : BLS12_381.g1, (i, g) : int * BLS12_381.g1) =
    BLS12_381.g1_add(x, BLS12_381.g1_mul(BLS12_381.int_to_fr(i), g))

  private function mk_proof({a = (ax, ay), b = ((bx1, bx2), (by1, by2)), c = (cx, cy)} : proofInput) : proof =
    { a = BLS12_381.mk_g1(ax, ay, 1),
      b = BLS12_381.mk_g2(bx1, bx2, by1, by2, 1, 0),
      c = BLS12_381.mk_g1(cx, cy, 1) }

  private function verifying_key() : verifying_key = {
    alpha = BLS12_381.mk_g1(<%= vk_alpha_1[0] %>,
                            <%= vk_alpha_1[1] %>,
                            1),

    beta = BLS12_381.mk_g2(<%= vk_beta_2[0][0] %>,
                           <%= vk_beta_2[0][1] %>,
                           <%= vk_beta_2[1][0] %>,
                           <%= vk_beta_2[1][1] %>,
                           1, 0),

    gamma = BLS12_381.mk_g2(<%= vk_gamma_2[0][0] %>,
                            <%= vk_gamma_2[0][1] %>,
                            <%= vk_gamma_2[1][0] %>,
                            <%= vk_gamma_2[1][1] %>,
                            1, 0),

    delta = BLS12_381.mk_g2(<%= vk_delta_2[0][0] %>,
                            <%= vk_delta_2[0][1] %>,
                            <%= vk_delta_2[1][0] %>,
                            <%= vk_delta_2[1][1] %>,
                            1, 0),

    gamma_abc =
<% if (IC.length == 0) { %>
        []
<% } else { %>
        [ BLS12_381.mk_g1(<%=IC[0][0]%>,
                          <%=IC[0][1]%>,
                          1)
<% for (let i=1; i<IC.length; i++) { %>
        , BLS12_381.mk_g1(<%=IC[i][0]%>,
                          <%=IC[i][1]%>,
                          1)
<% } %>
<% } %>
        ]
    }