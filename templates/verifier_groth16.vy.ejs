# @version >=0.3.4

# The prime q in the base field F_q for G1 
BASE_MODULUS : constant(uint256) = 21888242871839275222246405745257275088696311157297823662689037894645226208583

# The prime moludus of the scalar field of G1.
SCALAR_MODULUS : constant(uint256) = 21888242871839275222246405745257275088548364400416034343698204186575808495617

# the number of inputs
N_INPUTS: constant(uint256) = <%=IC.length-1%> 

struct G1Point:
    X: uint256
    Y: uint256

# Encoding of field elements is: X[0] * z + X[1]
struct G2Point:
    X: uint256[2]
    Y: uint256[2]

struct VerifyingKey:
    alfa1: G1Point
    beta2: G2Point
    gamma2: G2Point
    delta2: G2Point
    ic: DynArray[G1Point, <%=IC.length%>]

struct Proof:
    A: G1Point
    B: G2Point
    C: G1Point


# @dev return the generator of G1
@internal
@pure
def P1() -> G1Point:
    return G1Point({X: 1, Y: 2})


# @dev return the generator of G2
@internal
@pure
def P2() -> G2Point:
    return G2Point({
        X: [
          11559732032986387107991004021392285783925812861821192530917403151452391805634,
          10857046999023057135944570762232829481370756359578518086990519993285655852781
        ],
        Y: [
          4082367875863433681332203403145435568316851327593401208105741076214120093531,
          8495653923123431417604973247489272438418190587263600148770280649306958101930
        ]}
      )


# @dev return r the negation of p, i.e. p.addition(p.negate()) should be zero.
@internal
@view
def negate(p: G1Point) -> G1Point:
    if (p.X == 0) and (p.Y == 0):
        return p

    # Validate input or revert
    assert (p.X < BASE_MODULUS) or (p.Y < BASE_MODULUS), "invalid proof"

    # We know p.Y > 0 and p.Y < BASE_MODULUS.
    return G1Point({X: p.X, Y: BASE_MODULUS - p.Y})


# @dev return r the sum of two points of G1@return r the sum of two points of G1
@internal
@view
def addition(p1: G1Point, p2: G1Point) -> G1Point:
    # By EIP-196 all input is validated to be less than the BASE_MODULUS and form points
    # on the curve.
    a: uint256[2] = [p1.X, p1.Y]
    b: uint256[2] = [p2.X, p2.Y]
    result : uint256[2] = ecadd(a, b)
    r : G1Point = G1Point({X: result[0], Y: result[1]})
    return r


# @dev return r the product of a point on G1 and a scalar, i.e.
#      p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
@internal
@view
def scalar_mul(p: G1Point, s: uint256) -> G1Point:
    a: uint256[2] = [p.X, p.Y]
    result: uint256[2] = ecmul(a, s)
    r: G1Point = G1Point({X: result[0], Y: result[1]})
    return r


# @dev Asserts the pairing check
#      e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
#      For example pairing([P1(), P1().negate()], [P2(), P2()]) should succeed
#      this function supports n=N_INPUTS maximum
@internal
@view
def pairing_check_4(p1 : DynArray[G1Point, 4], p2: DynArray[G2Point, 4]) -> bool:
    # By EIP-197 all input is verified to be less than the BASE_MODULUS and form elements in their
    # respective groups of the right order.

    assert len(p1) == len(p2), "invalid pairing"

    input: DynArray[bytes32, 24] = []
    for i in range(4): 
        input.append(convert(p1[i].X, bytes32))
        input.append(convert(p1[i].Y, bytes32))
        input.append(convert(p2[i].X[0], bytes32))
        input.append(convert(p2[i].X[1], bytes32))
        input.append(convert(p2[i].Y[0], bytes32))
        input.append(convert(p2[i].Y[1], bytes32))

    converted: Bytes[768] = concat(input[0], input[1], input[2], input[3], input[4],input[5], 
                                   input[6], input[7], input[8], input[9], input[10], input[11],
                                   input[12], input[13], input[14], input[15], input[16], input[17], 
                                   input[18],input[19], input[20], input[21], input[22], input[23])

    # raw_call to ecpairing contract
    # the precompiled ecpairing contract returns 0x01 if success, 0x00 if the pairing fails 
    # https://www.evm.codes/precompiled#0x08?fork=arrowGlacier
    response: Bytes[32] = raw_call(0x0000000000000000000000000000000000000008, 
                        converted, 
                        max_outsize=32, 
                        is_static_call=True
                        )

    return _abi_decode(response, bool)


# @dev compute verifying key
@internal
@pure
def verifying_key() -> VerifyingKey:
    vk: VerifyingKey = VerifyingKey(
        {
            alfa1: G1Point({X: <%=vk_alpha_1[0]%>, Y: <%=vk_alpha_1[1]%>}),
            beta2: G2Point({X: [<%=vk_beta_2[0][1]%>, <%=vk_beta_2[0][0]%>], Y: [<%=vk_beta_2[1][1]%>, <%=vk_beta_2[1][0]%>]}), 
            gamma2: G2Point({X: [<%=vk_gamma_2[0][1]%>, <%=vk_gamma_2[0][0]%>], Y: [<%=vk_gamma_2[1][1]%>, <%=vk_gamma_2[1][0]%>]}),
            delta2: G2Point({X: [<%=vk_delta_2[0][1]%>, <%=vk_delta_2[0][0]%>], Y: [<%=vk_delta_2[1][1]%>, <%=vk_delta_2[1][0]%>]}),  
            ic: []
        }
    )
    <% for (let i=0; i<IC.length; i++) { %>
    vk.ic.append(G1Point({X: <%=IC[i][0]%>, Y: <%=IC[i][1]%>}))
    <% } %>
    return vk


# @dev Verifies the proof
@external
@view
def verify_proof(a: uint256[2], b: uint256[2][2], c: uint256[2], input: DynArray[uint256, <%=IC.length-1%>]) -> bool:
    # If the values are not in the correct range, the Pairing contract will revert.
    proof: Proof = Proof({
        A: G1Point({X: a[0], Y: a[1]}),
        B: G2Point({X: [b[0][0], b[0][1]], Y: [b[1][0], b[1][1]]}),
        C: G1Point({X: c[0], Y: c[1]})
    })

    vk: VerifyingKey = self.verifying_key()

    # Compute the linear combination vk_x of inputs times IC
    assert unsafe_add(len(input), 1) == len(vk.ic), "invalid proof"
    vk_x: G1Point = vk.ic[0]

    for i in range(N_INPUTS):
        vk_x = self.addition(vk_x, self.scalar_mul(vk.ic[i+1], input[i]))

    # check pairing
    p1: DynArray[G1Point, 4] = [
        self.negate(proof.A),
        vk.alfa1,
        vk_x,
        proof.C
    ]
    p2: DynArray[G2Point, 4] = [
        proof.B,
        vk.beta2,
        vk.gamma2,
        vk.delta2
    ]

    return self.pairing_check_4(p1, p2)